'use strict';

/*
================================================================
文字列を扱ってみよう
================================================================
*/

// console.log('hello');
// console.log('it\'s me!');
// // シングルクオーテーションを中に入れてしまうとエラーが起こってしまうため
// // 中の’に\を入れてあげることで文字として認識してくれる。

// console.log('hel\nlo wor\tld');
// // \n = 改行
// // \t = タブ（行間）


// console.log('hello' + 'world');
// 連結
/*
================================================================
数値の計算をしてみよう
================================================================
*/

// console.log(10 + 3);//足し算
// console.log(10 - 3);//引き算
// console.log(10 * 3);//掛け算
// console.log(10 / 3);//割り算
// console.log(10 % 3);//整数の余り


// console.log(2 + 10*3);//32
// console.log((2 + 10)*3);//36

/*
================================================================
定数を使ってみよう
================================================================
*/

//定数 const

// console.log(150 + 140);
// console.log(150 + 160);


// const price = 150;

// console.log(price * 140);
// console.log(price * 160);

/*
================================================================
変数を使ってみよう
================================================================
*/

//変数 let

// let price = 150;

// console.log(price * 140);
// console.log(price * 160);


// price = 170;

// console.log(price * 140);
// console.log(price * 160);

// 定数、変数の命名規則
// 英数字、$、_のみ。数値からは始められない
// let my-name; ×
// let 0price;　×


// 大文字小文字は区別される
// let my Name = 'fkoji';
// let myname = 'taguchi';


// 予約語は使えない
// let const; ×

/*
================================================================
変数を使った計算をしてみよう
================================================================
*/

// let price = 500;

// //price = price + 100;
// price += 100;


// //price = price * 2;
// price *= 2;

// //price = price + 1;
// //price += 1
// price ++;

// //price -=1
// price --;

// console.log(price);


/*
================================================================
データ型について見てみよう
================================================================
*/

// 文字列（string） 'hello''世界'
// 数値（Number）  5 4 3 
// undefined  //定義されていないもの
// Null //値がないことを示す特殊な値
// 真偽値（Boolean）true,false
// オブジェクト（object）{a:3, b:5}

// console.log(typeof'hello');
// console.log(typeof 5);
// console.log(typeof undefined);
// console.log(typeof null);


/*
================================================================
数字からなる文字列を扱ってみよう
================================================================
*/

// console.log('5' * '3');
// console.log('5' - '3');
// // 文字列にしても数値に変換して、演算できるということに注意

// console.log('5' + 3);//53
// console.log(parseInt('5',10) + 3);//8
// // perseInt 5という文字列を10進数の整数値に変換してくれる

// console.log(parseInt('hello',10));//NAN (not a number)数値に出来なかったことを示す



/*
================================================================
比較演算子を使ってみよう
================================================================
*/

// const price = 1200;

// console.log(price > 1000); //true
// console.log(price < 1000); //false　--小さい
// console.log(price >= 1000); //true --以上
// console.log(price <= 1000); //false　--以下
// console.log(price === 1000); //false　--と等しい
// console.log(price !== 1000); //true --と異なる

// //false <- 0,null,undefined,'',false
// //true <- それ以外

// console.log(Boolean(0));
// console.log(Boolean('hello'));

/*
================================================================
ifで条件分岐をしてみよう
================================================================
*/

// const score = 40;

// if(score >= 80){
//     console.log('Great!');
// }else if(score >= 60){
//     console.log('Good.');
// }else{
//     console.log('OK...');
// }


/*
================================================================
条件演算子を使ってみよう
================================================================
*/
// const score = 60;
// const name = 'taguchi';

// if(score >= 50){
//     if( name === 'taguchi'){
//         console.log('Good job!');
//     }
// }

//&&なおかつ　条件を両方満たしている（and）
//||もしくは　条件を片方満たしている (or)
//!~ではない (not)
// ↓

// if(score >= 50 && name === 'taguchi'){
//     console.log('Good job!');
// }


/*
================================================================
switchで条件分岐をしてみよう
================================================================
*/

const signal = 'pink';

// if(signal === 'red'){
// console.log('stop!');
// }
//  else if(signal === 'yellow'){
//     console.log('caution');
// }
//  else if(signal === 'blue'){
//     console.log('go!');
//  }



//  switch(signal){
//     case 'red':
//         console.log('stop');
//         break;
//     case 'yellow':
//         console.log('caution');
//         break;
//     case 'blue':
//     case 'green':
//         console.log('go!');
//     break;
//     default:
//         console.log('wrong signal');
//  }

/*
================================================================
forを使ったループ処理をしよう
================================================================
*/

// for (let i =1;i<=10;i++){
//     // console.log('hello');
//     // console.log('hello'+i);
//     console.log(`hello ${i}`);
//     テンプレートリテラルを使うときにはバッククォート``を使用する。
// }

/*
================================================================
whileを使ったループ処理をしよう
================================================================
*/

// let hp = 100;

// while(hp>0){
//     console.log(`${hp} HP left`);
//     hp -= 15;
// }

// let hp = -50;

// do{
//     console.log(`${hp} HP left`);
//     hp -= 15;
// } while(hp > 0);
// -50のため、hpを処理できないが、hpを表示したい
/*
================================================================
continue breakを使ってみよう
================================================================
*/

// continue ループ処理をスキップするときに使用。
// break ループ処理を終了する。

// for(let i =1;i <= 10; i++){
//     // if(i === 4){
//         // 4だけをスキップ
//         // if(i % 3 === 0){
//         // continue;
//         // 3の倍数をスキップ
//         if(i === 4){
//             break;
//             // 4の時に処理を終了
//         }
//         console.log(i);
//     }


/*
================================================================
関数で処理をまとめてみよう
================================================================
*/
// 関数でまとめておき、コードを書く量を減らす。
// あとで処理の内容を変更したときに、関数の処理だけを変更すればよい


// function showAd(){
//     console.log('------');
//     console.log('--Ad---');
//     console.log('------');
// }


// showAd();
// console.log('Tom is great!');
// console.log('Bob is great!');
// showAd();
// console.log('Steve is great!');
// console.log('Richard is great!');
// showAd();


/*
================================================================
引数を使ってみよう
================================================================
*/

// function showAd(message = 'Ad'){//仮引数
//     console.log('------');
//     console.log(`--${message}---`);//バッククォートなので注意
//     console.log('------');
// }


// showAd('Header Ad');//実引数
// console.log('Tom is great!');
// console.log('Bob is great!');
// // showAd('Ad');
// showAd();//初期値（message = 'Ad'）を設定しておくと空欄でもAdと表示される
// console.log('Steve is great!');
// console.log('Richard is great!');
// showAd('Footer Ad');

/*
================================================================
return で値を返してみよう
================================================================
*/

// function sum(a,b,c){
// // console.log(a + b + c);
// return a + b +c;
// }

// // sum(1,2,3);
// // sum(3,4,5);

// const total = sum(1,2,3)+ sum(3,4,5);//18
// console.log(total);

// function greeting(name) 
// { return 'こんにちは、' + name + 'さん。'; } 
// console.log(greeting('佐藤') ); //【実行結果】 こんにちは、佐藤さん。

// function 関数は～ということにする。
// return はでも最後には～ということにしてね、ということになる


/*
================================================================
関数式を使ってみよう
================================================================
*/

// 関数宣言
// function 関数名（仮引数,仮引数,・・・）{
//     処理;
//     処理;
//     return 還り値;
// }

// 呼び出し　関数名(実引数,実引数,・・・);


// 関数式
// const 定数名  function(仮引数,仮引数,・・・）{関数には名前がないため、無名関数とも呼ばれる
//     処理;
//     処理;
//     return 還り値;
// };　←セミコロンを忘れずに

// 呼び出し　関数名(実引数,実引数,・・・);

// const sum = function(a,b,c){
// return a + b +c;
// };

// const total = sum(1,2,3)+ sum(3,4,5);//18
// console.log(total);


/*
================================================================
アロー関数を使ってみよう
================================================================
*/
// 関数式をより短く使う

// const sum = (a,b,c) => a + b + c;

// const total = sum(1,2,3)+ sum(3,4,5);//18
// console.log(total);



// const double = function(a){
//     return a*2;
// };
// ↓さらに省略可能→　function()　returnを省略

// const double = (a) =>a*2
// console.log(double(12));

/*
================================================================
アロー関数を使ってみよう
================================================================
*/

// const x = 2;
// ブロックの外のスコープ　= グローバルスコープ
// 全ての範囲で有効、ただしブロック内で宣言されたものがあればそれを優先


// function f(){
//     const x =1;
//     console.log(x);
// }
/*ここでこのように定数や変数がブロック内で宣言された場合
その定数や変数はこのブロックの中でだけ有効というルールがあることに注意/*


f();
console.log(x);